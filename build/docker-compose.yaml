# Why are the Volumes commented out?
#   Because of Docker Swarm's inherent need of distributed data, it presented challenges that we're too resource intensive to justify.
#   In addition, Kafka has application-level recovery strategies in place.

# volumes:
#   controller-1-volume:
#   controller-2-volume:
#   controller-3-volume:
#   broker-1-volume:
#   broker-2-volume:
#   broker-3-volume:
#   broker-4-volume:
#   broker-5-volume:
#   broker-6-volume:

networks:
  network:
    driver: overlay

services:
  controller-1:
    image: apache/kafka:latest
    container_name: controller-1
    environment:
      KAFKA_NODE_ID: 1
      KAFKA_PROCESS_ROLES: controller
      KAFKA_LISTENERS: CONTROLLER://:9093
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@controller-1:9093,2@controller-2:9093,3@controller-3:9093

      # Mount location
      KAFKA_LOG_DIRS: '/var/lib/kafka/data'

      # Consumer policies
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
    healthcheck:
      test: ["CMD", "./opt/kafka/bin/kafka-configs.sh", "--bootstrap-server", "localhost:9093", "--version"]
      interval: 60s
      retries: 3
      start_period: 40s
      timeout: 30s
    restart: on-failure:3
    #volumes:
    #  - controller-1-volume:/var/lib/kafka/data
    deploy:
      placement:
        preferences:
          - spread: node.labels.group1
    networks:
      - network

  controller-2:
    image: apache/kafka:latest
    container_name: controller-2
    environment:
      KAFKA_NODE_ID: 2
      KAFKA_PROCESS_ROLES: controller
      KAFKA_LISTENERS: CONTROLLER://:9093
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@controller-1:9093,2@controller-2:9093,3@controller-3:9093

      # Mount location
      KAFKA_LOG_DIRS: '/var/lib/kafka/data'

      # Consumer policies
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
    healthcheck:
      test: ["CMD", "./opt/kafka/bin/kafka-configs.sh", "--bootstrap-server", "localhost:9093", "--version"]
      interval: 60s
      retries: 3
      start_period: 40s
      timeout: 30s
    restart: on-failure:3
    #volumes:
    #  - controller-2-volume:/var/lib/kafka/data
    depends_on:
      - controller-1
    deploy:
      placement:
        preferences:
          - spread: node.labels.group2
    networks:
      - network

  controller-3:
    image: apache/kafka:latest
    container_name: controller-3
    environment:
      KAFKA_NODE_ID: 3
      KAFKA_PROCESS_ROLES: controller
      KAFKA_LISTENERS: CONTROLLER://:9093
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@controller-1:9093,2@controller-2:9093,3@controller-3:9093

      # Mount location
      KAFKA_LOG_DIRS: '/var/lib/kafka/data'

      # Consumer policies
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
    healthcheck:
      test: ["CMD", "./opt/kafka/bin/kafka-configs.sh", "--bootstrap-server", "localhost:9093", "--version"]
      interval: 60s
      retries: 3
      start_period: 40s
      timeout: 30s
    restart: on-failure:3
    #volumes:
    #  - controller-3-volume:/var/lib/kafka/data
    depends_on:
      - controller-2
    deploy:
      placement:
        preferences:
          - spread: node.labels.group3
    networks:
      - network

  broker-1:
    image: apache_kafka_broker:latest
    container_name: broker-1
    ports:
      - 29092:9092
    environment:

      # Base configurations
      KAFKA_NODE_ID: 5
      KAFKA_PROCESS_ROLES: broker
      KAFKA_LISTENERS: 'PLAINTEXT://:19092,PLAINTEXT_HOST://:9092'

      # The advertised listeners will be dynamically assigned based on swarm placement
      KAFKA_PORT: 29092
      KAFKA_CONTAINER_NAME: broker-1
      # KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker-1:19092

      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@controller-1:9093,2@controller-2:9093,3@controller-3:9093

      # Mount location
      KAFKA_LOG_DIRS: '/var/lib/kafka/data'

      # Consumer policies
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0

      # Retention policies
      KAFKA_LOG_RETENTION_MS: 86400000  # 1 day in milliseconds
      KAFKA_LOG_RETENTION_BYTES: 1073741824  # 1 GB
      KAFKA_LOG_SEGMENT_BYTES: 524288000  # 500 MB
      KAFKA_LOG_CLEANUP_POLICY_DELETE_RETENTION_MS: 3600000  # 1 hour

      # Fault tolerance & High availability
      KAFKA_DEFAULT_REPLICATION_FACTOR: 3
      KAFKA_MIN_INSYNC_REPLICAS: 2
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 3

    # The healthcheck will try and list all topics available. This will actively check the connection between it and all the other nodes.
    healthcheck:
      test: ["CMD", "./opt/kafka/bin/kafka-configs.sh", "--bootstrap-server", "localhost:9093", "--version"]
      interval: 60s
      retries: 3
      start_period: 120s
      timeout: 30s

    restart: on-failure:3
    depends_on:
      - controller-1
      - controller-2
      - controller-3
    #volumes:
    #  - broker-1-volume:/var/lib/kafka/data
    deploy:
      placement:
        preferences:
          - spread: node.labels.group1
    networks:
      - network

  broker-2:
    image: apache_kafka_broker:latest
    container_name: broker-2
    ports:
      - 29093:9092
    environment:

      # Base configurations
      KAFKA_NODE_ID: 6
      KAFKA_PROCESS_ROLES: broker
      KAFKA_LISTENERS: 'PLAINTEXT://:19092,PLAINTEXT_HOST://:9092'

      # The advertised listeners will be dynamically assigned based on swarm placement
      KAFKA_PORT: 29093
      KAFKA_CONTAINER_NAME: broker-2
      # KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker-2:19092

      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@controller-1:9093,2@controller-2:9093,3@controller-3:9093

      # Mount location
      KAFKA_LOG_DIRS: '/var/lib/kafka/data'

      # Consumer policies
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0

      # Retention policies
      KAFKA_LOG_RETENTION_MS: 86400000  # 1 day in milliseconds
      KAFKA_LOG_RETENTION_BYTES: 1073741824  # 1 GB
      KAFKA_LOG_SEGMENT_BYTES: 524288000  # 500 MB
      KAFKA_LOG_CLEANUP_POLICY_DELETE_RETENTION_MS: 3600000  # 1 hour

      # Fault tolerance & High availability
      KAFKA_DEFAULT_REPLICATION_FACTOR: 3
      KAFKA_MIN_INSYNC_REPLICAS: 2
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 3

    # The healthcheck will try and list all topics available. This will actively check the connection between it and all the other nodes.
    healthcheck:
      test: ["CMD", "./opt/kafka/bin/kafka-configs.sh", "--bootstrap-server", "localhost:9093", "--version"]
      interval: 60s
      retries: 3
      start_period: 120s
      timeout: 30s

    restart: on-failure:3
    depends_on:
      - controller-1
      - controller-2
      - controller-3
    #volumes:
    #  - broker-2-volume:/var/lib/kafka/data
    deploy:
      placement:
        preferences:
          - spread: node.labels.group1
    networks:
      - network

  broker-3:
    image: apache_kafka_broker:latest
    container_name: broker-3
    ports:
      - 39092:9092
    environment:

      # Base configurations
      KAFKA_NODE_ID: 7
      KAFKA_PROCESS_ROLES: broker
      KAFKA_LISTENERS: 'PLAINTEXT://:19092,PLAINTEXT_HOST://:9092'

      # The advertised listeners will be dynamically assigned based on swarm placement
      KAFKA_PORT: 39092
      KAFKA_CONTAINER_NAME: broker-3
      # KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker-3:19092

      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@controller-1:9093,2@controller-2:9093,3@controller-3:9093

      # Mount location
      KAFKA_LOG_DIRS: '/var/lib/kafka/data'

      # Consumer policies
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0

      # Retention policies
      KAFKA_LOG_RETENTION_MS: 86400000  # 1 day in milliseconds
      KAFKA_LOG_RETENTION_BYTES: 1073741824  # 1 GB
      KAFKA_LOG_SEGMENT_BYTES: 524288000  # 500 MB
      KAFKA_LOG_CLEANUP_POLICY_DELETE_RETENTION_MS: 3600000  # 1 hour

      # Fault tolerance & High availability
      KAFKA_DEFAULT_REPLICATION_FACTOR: 3
      KAFKA_MIN_INSYNC_REPLICAS: 2
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 3

    # The healthcheck will try and list all topics available. This will actively check the connection between it and all the other nodes.
    healthcheck:
      test: ["CMD", "./opt/kafka/bin/kafka-configs.sh", "--bootstrap-server", "localhost:9093", "--version"]
      interval: 60s
      retries: 3
      start_period: 120s
      timeout: 30s

    restart: on-failure:3
    depends_on:
      - controller-1
      - controller-2
      - controller-3
    #volumes:
    #  - broker-3-volume:/var/lib/kafka/data
    deploy:
      placement:
        preferences:
          - spread: node.labels.group2
    networks:
      - network

  broker-4:
    image: apache_kafka_broker:latest
    container_name: broker-4
    ports:
      - 39093:9092
    environment:

      # Base configurations
      KAFKA_NODE_ID: 8
      KAFKA_PROCESS_ROLES: broker
      KAFKA_LISTENERS: 'PLAINTEXT://:19092,PLAINTEXT_HOST://:9092'

      # The advertised listeners will be dynamically assigned based on swarm placement
      KAFKA_PORT: 39093
      KAFKA_CONTAINER_NAME: broker-4
      # KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker-4:19092

      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@controller-1:9093,2@controller-2:9093,3@controller-3:9093

      # Mount location
      KAFKA_LOG_DIRS: '/var/lib/kafka/data'

      # Consumer policies
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0

      # Retention policies
      KAFKA_LOG_RETENTION_MS: 86400000  # 1 day in milliseconds
      KAFKA_LOG_RETENTION_BYTES: 1073741824  # 1 GB
      KAFKA_LOG_SEGMENT_BYTES: 524288000  # 500 MB
      KAFKA_LOG_CLEANUP_POLICY_DELETE_RETENTION_MS: 3600000  # 1 hour

      # Fault tolerance & High availability
      KAFKA_DEFAULT_REPLICATION_FACTOR: 3
      KAFKA_MIN_INSYNC_REPLICAS: 2
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 3

    # The healthcheck will try and list all topics available. This will actively check the connection between it and all the other nodes.
    healthcheck:
      test: ["CMD", "./opt/kafka/bin/kafka-configs.sh", "--bootstrap-server", "localhost:9093", "--version"]
      interval: 60s
      retries: 3
      start_period: 120s
      timeout: 30s

    restart: on-failure:3
    depends_on:
      - controller-1
      - controller-2
      - controller-3
    #volumes:
    #  - broker-4-volume:/var/lib/kafka/data
    deploy:
      placement:
        preferences:
          - spread: node.labels.group2
    networks:
      - network

  broker-5:
    image: apache_kafka_broker:latest
    container_name: broker-5
    ports:
      - 49092:9092
    environment:

      # Base configurations
      KAFKA_NODE_ID: 9
      KAFKA_PROCESS_ROLES: broker
      KAFKA_LISTENERS: 'PLAINTEXT://:19092,PLAINTEXT_HOST://:9092'

      # The advertised listeners will be dynamically assigned based on swarm placement
      KAFKA_PORT: 49092
      KAFKA_CONTAINER_NAME: broker-5
      # KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker-5:19092

      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@controller-1:9093,2@controller-2:9093,3@controller-3:9093

      # Mount location
      KAFKA_LOG_DIRS: '/var/lib/kafka/data'

      # Consumer policies
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0

      # Retention policies
      KAFKA_LOG_RETENTION_MS: 86400000  # 1 day in milliseconds
      KAFKA_LOG_RETENTION_BYTES: 1073741824  # 1 GB
      KAFKA_LOG_SEGMENT_BYTES: 524288000  # 500 MB
      KAFKA_LOG_CLEANUP_POLICY_DELETE_RETENTION_MS: 3600000  # 1 hour

      # Fault tolerance & High availability
      KAFKA_DEFAULT_REPLICATION_FACTOR: 3
      KAFKA_MIN_INSYNC_REPLICAS: 2
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 3

    # The healthcheck will try and list all topics available. This will actively check the connection between it and all the other nodes.
    healthcheck:
      test: ["CMD", "./opt/kafka/bin/kafka-configs.sh", "--bootstrap-server", "localhost:9093", "--version"]
      interval: 60s
      retries: 3
      start_period: 120s
      timeout: 30s

    restart: on-failure:3
    depends_on:
      - controller-1
      - controller-2
      - controller-3
    #volumes:
    #  - broker-5-volume:/var/lib/kafka/data
    deploy:
      placement:
        preferences:
          - spread: node.labels.group3
    networks:
      - network

  broker-6:
    image: apache_kafka_broker:latest
    container_name: broker-6
    ports:
      - 49093:9092
    environment:

      # Base configurations
      KAFKA_NODE_ID: 10
      KAFKA_PROCESS_ROLES: broker
      KAFKA_LISTENERS: 'PLAINTEXT://:19092,PLAINTEXT_HOST://:9092'

      # The advertised listeners will be dynamically assigned based on swarm placement
      KAFKA_PORT: 49093
      KAFKA_CONTAINER_NAME: broker-6
      # KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker-6:19092

      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@controller-1:9093,2@controller-2:9093,3@controller-3:9093

      # Mount location
      KAFKA_LOG_DIRS: '/var/lib/kafka/data'

      # Consumer policies
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0

      # Retention policies
      KAFKA_LOG_RETENTION_MS: 86400000  # 1 day in milliseconds
      KAFKA_LOG_RETENTION_BYTES: 1073741824  # 1 GB
      KAFKA_LOG_SEGMENT_BYTES: 524288000  # 500 MB
      KAFKA_LOG_CLEANUP_POLICY_DELETE_RETENTION_MS: 3600000  # 1 hour

      # Fault tolerance & High availability
      KAFKA_DEFAULT_REPLICATION_FACTOR: 3
      KAFKA_MIN_INSYNC_REPLICAS: 2
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 3

    # The healthcheck will try and list all topics available. This will actively check the connection between it and all the other nodes.
    healthcheck:
      test: ["CMD", "./opt/kafka/bin/kafka-configs.sh", "--bootstrap-server", "localhost:9093", "--version"]
      interval: 60s
      retries: 3
      start_period: 120s
      timeout: 30s

    restart: on-failure:3
    depends_on:
      - controller-1
      - controller-2
      - controller-3
    #volumes:
    #  - broker-6-volume:/var/lib/kafka/data
    deploy:
      placement:
        preferences:
          - spread: node.labels.group3
    networks:
      - network
